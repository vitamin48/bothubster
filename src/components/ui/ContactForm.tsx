import { useState } from "react";

export const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    message: "",
  });
  const [status, setStatus] = useState<"idle" | "sending" | "success" | "error">("idle");

  const BOT_TOKEN = "YOUR_BOT_TOKEN"; // ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç—å
  const CHAT_ID = "YOUR_CHAT_ID";     // ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç—å

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("sending");

    const text = `
üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:

üë§ –ò–º—è: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.message}
    `;

    try {
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text,
        }),
      });

      if (response.ok) {
        setStatus("success");
        setFormData({ name: "", phone: "", message: "" });
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      setStatus("error");
    }
  };

  return (
    <section className="bg-white py-12" id="contact">
      <div className="container mx-auto max-w-xl px-4">
        <h2 className="text-3xl font-bold mb-6 text-center text-[var(--primary-color)]">–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</h2>

        <form onSubmit={handleSubmit} className="space-y-4 bg-gray-50 p-6 rounded-xl shadow">
          <input
            name="name"
            type="text"
            placeholder="–í–∞—à–µ –∏–º—è"
            required
            value={formData.name}
            onChange={handleChange}
            className="w-full rounded border border-gray-300 p-3 outline-none"
          />

          <input
            name="phone"
            type="tel"
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            required
            value={formData.phone}
            onChange={handleChange}
            className="w-full rounded border border-gray-300 p-3 outline-none"
          />

          <textarea
            name="message"
            rows={4}
            placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É"
            value={formData.message}
            onChange={handleChange}
            className="w-full rounded border border-gray-300 p-3 outline-none resize-none"
          />

          <button
            type="submit"
            disabled={status === "sending"}
            className="w-full rounded bg-[var(--primary-color)] p-3 font-semibold text-white transition hover:opacity-90 disabled:opacity-60"
          >
            {status === "sending" ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </button>

          {status === "success" && (
            <p className="text-green-600 text-sm mt-2">‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</p>
          )}
          {status === "error" && (
            <p className="text-red-600 text-sm mt-2">‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
          )}
        </form>
      </div>
    </section>
  );
};
